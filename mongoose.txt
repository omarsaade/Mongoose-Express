mongoos.txt

create a schema:

we use a schema to define the shape of documents within a 
collection in Mongodb.
 
 playground : database

 courses: collection

 jawet el collection fi el documents li hye el data

 collection : is like Table in relational database
 Documents  : is like row in relational database


 concept of schema is specific to mongoose..not to Mongodb

 Buffer: for storing binary data

 


 
const mongoose = require("mongoose");
mongoose
  .connect("mongodb://localhost/playground")
  .then(() => console.log("Connected to MongoDB..."))
  .catch((err) => console.log("Could not connect to MongoDB...", err));

const courseSchema = new mongoose.Schema({
  name: String,
  author: String,
  tags: [String],
  date: { type: Date, default: Date.now },
  isPublished: Boolean,
});

/*
now we need to compile this schema into a model
     john hye instance men el class human
        Classes   , objects
         Human    , John
         Course   , nodeCourse
*/

// Course is a class
//to create a class like course we need to compile the schema to model
const Course = mongoose.model("Course", courseSchema);

//object course
const course = new Course({
  name: "Node.js Course",
  author: "Mosh",
  tags: ["node", "backend"],
  isPublished: true,
});





//////////////////////////////////////////////////////////////////////////////////
                 Saving a Document




its important To download the exact mongoose and mongodb version...i dont mean the same
mongodb 3.6.2
mongoose 5.0.0
search for the ideal version for each mongodb version


========================================================



          
                       Querying Documents.
  Filtering





const mongoose = require("mongoose");
mongoose
  .connect("mongodb://localhost/playground")
  .then(() => console.log("Connected to MongoDB..."))
  .catch((err) => console.log("Could not connect to MongoDB...", err));

const courseSchema = new mongoose.Schema({
  name: String,
  author: String,
  tags: [String],
  date: { type: Date, default: Date.now },
  isPublished: Boolean,
});

/*
Now we need to compile this schema into a model
     john hye instance men el class human
        Classes   , objects
         Human    , John
         Course   , nodeCourse
*/

// Course is a class
//to create a class like course we need to compile the schema to model
const Course = mongoose.model("Course", courseSchema);

async function createCourse() {
  //object course
  const course = new Course({
    name: "Mosh Course",
    author: "Maximillian shwarzmuller",
    tags: ["node", "backend"],
    isPublished: true,
  });

  //  Async operation , save
  // The save() method returns a promise. If save() succeeds, the promise resolves to the document that was saved.
  const result = await course.save();
  //display on the console
  console.log(result);
}

async function getCourses() {
  //.find() btarje3 document query object..li hye promise
  const courses = await Course.find({ author: "Mosh", isPublished: true })
    .limit(10)
    .sort({ name: 1 })
    // 1 ASCENDING ORDER   DESC -1
    .select({ name: 1, tags: 1 });
  console.log(courses);
}

getCourses();
// createCourse();









=========================================================================


           



===========================================
everytime

"mongoose": "^5.0.0"
mongo v3.6.23


const mongoose = require("mongoose");
mongoose
  .connect("mongodb://localhost/playground")
  .then(() => console.log("Connected to MongoDB..."))
  .catch((err) => console.log("Could not connect to MongoDB...", err));

const courseSchema = new mongoose.Schema({
  name: String,
  author: String,
  tags: [String],
  date: { type: Date, default: Date.now },
  isPublished: Boolean,
});

/*
Now we need to compile this schema into a model
     john hye instance men el class human
        Classes   , objects
         Human    , John
         Course   , nodeCourse
*/

// Course is a class
//to create a class like course we need to compile the schema to model
const Course = mongoose.model("Course", courseSchema);

async function createCourse() {
  //object course
  const course = new Course({
    name: "Mosh",
    author: "Maximillian shwarzmuller",
    tags: ["node", "backend"],
    isPublished: true,
  });

  //  Async operation , save
  // The save() method returns a promise. If save() succeeds, the promise resolves to the document that was saved.
  const result = await course.save();
  //display on the console
  console.log(result);
}
// createCourse();

async function getCourses() {
  /*
  const courses = await Course.find();
  console.log(courses);
*/
  //.find() btarje3 document query object..li hye promise
  const courses = await Course.find({
    name: "Mosh",
    isPublished: true,
  })
    .limit(10)
    .sort({ name: 1 })
    // 1 ASCENDING ORDER   DESC -1
    .select({ name: 1, tags: 1 });
  console.log(courses);
}

getCourses();

/*

eq(equal)
ne(not equal)
gt (greater than)
gte (greater than or equal to)
lt (less than)
lte (less than or equal to)
in
nin (not in)


lets imagine our courses have a price property


*/




========================



           Comparison Query Operators


